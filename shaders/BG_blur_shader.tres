[gd_resource type="VisualShader" load_steps=6 format=2]

[ext_resource path="res://addons/shaderV/rgba/blur/blur9sample.gd" type="Script" id=1]

[sub_resource type="VisualShaderNodeCustom" id=5]
default_input_values = [ 2, 2.0, 3, 0.1 ]
initialized = true
script = ExtResource( 1 )

[sub_resource type="VisualShaderNodeInput" id=6]
input_name = "screen_texture"

[sub_resource type="VisualShaderNodeTexture" id=7]
source = 5

[sub_resource type="VisualShaderNodeInput" id=8]
input_name = "screen_uv"

[resource]
code = "shader_type canvas_item;


// BlurBasic

vec4 blur9sampleFunc(sampler2D _samp_b1ur, vec2 _uv_b1ur, float _lod_b1ur, float _rad_b1ur){
	vec4 _c01r_b1ur = vec4(0.0);
	if (_lod_b1ur < 0.0){
		_c01r_b1ur = texture(_samp_b1ur, _uv_b1ur);
		_c01r_b1ur += texture(_samp_b1ur, _uv_b1ur + vec2(0, - _rad_b1ur) * 0.01);
		_c01r_b1ur += texture(_samp_b1ur, _uv_b1ur + vec2(0, _rad_b1ur) * 0.01);
		_c01r_b1ur += texture(_samp_b1ur, _uv_b1ur + vec2(- _rad_b1ur, 0) * 0.01);
		_c01r_b1ur += texture(_samp_b1ur, _uv_b1ur + vec2(_rad_b1ur, 0) * 0.01);
		_c01r_b1ur += texture(_samp_b1ur, _uv_b1ur + vec2(- _rad_b1ur, - _rad_b1ur) * 0.01);
		_c01r_b1ur += texture(_samp_b1ur, _uv_b1ur + vec2(- _rad_b1ur, _rad_b1ur) * 0.01);
		_c01r_b1ur += texture(_samp_b1ur, _uv_b1ur + vec2(_rad_b1ur, _rad_b1ur) * 0.01);
		_c01r_b1ur += texture(_samp_b1ur, _uv_b1ur + vec2(_rad_b1ur, -_rad_b1ur) * 0.01);
	}else{
		_c01r_b1ur = textureLod(_samp_b1ur, _uv_b1ur, _lod_b1ur);
		_c01r_b1ur += textureLod(_samp_b1ur, _uv_b1ur + vec2(0, - _rad_b1ur) * 0.01, _lod_b1ur);
		_c01r_b1ur += textureLod(_samp_b1ur, _uv_b1ur + vec2(0, _rad_b1ur) * 0.01, _lod_b1ur);
		_c01r_b1ur += textureLod(_samp_b1ur, _uv_b1ur + vec2(- _rad_b1ur, 0) * 0.01, _lod_b1ur);
		_c01r_b1ur += textureLod(_samp_b1ur, _uv_b1ur + vec2(_rad_b1ur, 0) * 0.01, _lod_b1ur);
		_c01r_b1ur += textureLod(_samp_b1ur, _uv_b1ur + vec2(- _rad_b1ur, - _rad_b1ur) * 0.01, _lod_b1ur);
		_c01r_b1ur += textureLod(_samp_b1ur, _uv_b1ur + vec2(- _rad_b1ur, _rad_b1ur) * 0.01, _lod_b1ur);
		_c01r_b1ur += textureLod(_samp_b1ur, _uv_b1ur + vec2(_rad_b1ur, _rad_b1ur) * 0.01, _lod_b1ur);
		_c01r_b1ur += textureLod(_samp_b1ur, _uv_b1ur + vec2(_rad_b1ur, -_rad_b1ur) * 0.01, _lod_b1ur);
	}
	_c01r_b1ur /= 9.0;
	return _c01r_b1ur;
}


void vertex() {
// Output:0

}

void fragment() {
// Input:3

// Input:5
	vec3 n_out5p0 = vec3(SCREEN_UV, 0.0);

// BlurBasic:2
	float n_in2p2 = 2.00000;
	float n_in2p3 = 0.10000;
	vec3 n_out2p0;
	float n_out2p1;
	{
		vec4 n_out2p0n_out2p1 = blur9sampleFunc(SCREEN_TEXTURE, n_out5p0.xy, n_in2p2, n_in2p3);
		n_out2p0 = n_out2p0n_out2p1.rgb;
		n_out2p1 = n_out2p0n_out2p1.a;
	}

// Output:0
	COLOR.rgb = n_out2p0;

}

void light() {
// Output:0

}
"
graph_offset = Vector2( -638, -70.6667 )
mode = 1
flags/light_only = false
nodes/fragment/2/node = SubResource( 5 )
nodes/fragment/2/position = Vector2( 0, 80 )
nodes/fragment/3/node = SubResource( 6 )
nodes/fragment/3/position = Vector2( -720, 120 )
nodes/fragment/4/node = SubResource( 7 )
nodes/fragment/4/position = Vector2( -240, 420 )
nodes/fragment/5/node = SubResource( 8 )
nodes/fragment/5/position = Vector2( -700, 400 )
nodes/fragment/connections = PoolIntArray( 5, 0, 2, 1, 3, 0, 2, 0, 2, 0, 0, 0 )
