[gd_scene load_steps=19 format=2]

[ext_resource path="res://weapons/grenade/GrenadeAmmo.gd" type="Script" id=1]
[ext_resource path="res://sprites/particles/fire_01 (Custom).png" type="Texture" id=2]
[ext_resource path="res://sprites/weapons/grenade.png" type="Texture" id=3]

[sub_resource type="PhysicsMaterial" id=53]
bounce = 0.7

[sub_resource type="CircleShape2D" id=54]
radius = 10.0499

[sub_resource type="VisualShaderNodeInput" id=39]
input_name = "texture"

[sub_resource type="VisualShaderNodeTexture" id=40]
source = 5

[sub_resource type="VisualShaderNodeScalarFunc" id=41]
function = 15

[sub_resource type="VisualShader" id=42]
code = "shader_type canvas_item;



void vertex() {
// Output:0

}

void fragment() {
// Input:2

// Texture:3
	vec3 n_out3p0;
	float n_out3p1;
	{
		vec4 TEXTURE_tex_read = texture(TEXTURE, UV.xy);
		n_out3p0 = TEXTURE_tex_read.rgb;
		n_out3p1 = TEXTURE_tex_read.a;
	}

// ScalarFunc:4
	float n_out4p0 = round(n_out3p1);

// Output:0
	COLOR.a = n_out4p0;

}

void light() {
// Output:0

}
"
graph_offset = Vector2( -140, -35 )
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2( 560, 120 )
nodes/fragment/2/node = SubResource( 39 )
nodes/fragment/2/position = Vector2( -240, 120 )
nodes/fragment/3/node = SubResource( 40 )
nodes/fragment/3/position = Vector2( 20, 120 )
nodes/fragment/4/node = SubResource( 41 )
nodes/fragment/4/position = Vector2( 300, 60 )
nodes/fragment/connections = PoolIntArray( 2, 0, 3, 2, 3, 1, 4, 0, 4, 0, 0, 1 )

[sub_resource type="ShaderMaterial" id=43]
shader = SubResource( 42 )

[sub_resource type="Curve" id=44]
_data = [ Vector2( 0, 1 ), 0.0, 0.0, 0, 0, Vector2( 1, 0 ), -1.75114, 0.0, 0, 0 ]

[sub_resource type="CurveTexture" id=6]
curve = SubResource( 44 )

[sub_resource type="ParticlesMaterial" id=45]
emission_shape = 1
emission_sphere_radius = 18.57
flag_disable_z = true
spread = 180.0
gravity = Vector3( 0, 1000, 0 )
initial_velocity = 750.0
initial_velocity_random = 0.16
angular_velocity = 1000.0
orbit_velocity = 0.0
orbit_velocity_random = 0.0
linear_accel = 3.92
scale = 0.65
scale_random = 0.73
scale_curve = SubResource( 6 )

[sub_resource type="Shader" id=50]
code = "shader_type canvas_item;

uniform float max_line_width = 10.0;
uniform float min_line_width = 5.0;
uniform float freq = 1.0;
uniform float block_size = 20.0;
uniform vec4 outline_colour = vec4(0,0,0,1);

const float pi = 3.1415;
const int ang_res = 16;


float hash(vec2 p, float s) {
	return fract(35.1 * sin(dot(vec3(112.3, 459.2, 753.2), vec3(p, s))));
}

float noise(vec2 p, float s) {
	vec2 d = vec2(0, 1);
	vec2 b = floor(p);
	vec2 f = fract(p);
	return mix(
		mix(hash(b + d.xx, s), hash(b + d.yx, s), f.x),
		mix(hash(b + d.xy, s), hash(b + d.yy, s), f.x), f.y);
}

float get_line_width(vec2 p, float s) {
	p /= block_size;
	float w = 0.0;
	float intensity = 1.0;
	for (int i = 0; i < 3; i++) {
		w = mix(w, noise(p, s), intensity);
		p /= 2.0;
		intensity /= 2.0;
	}
	
	return mix(max_line_width, min_line_width, w);
}

void fragment() {

	float alpha = 0.0;
	float timeStep = floor(TIME * freq);
	vec2 scale = TEXTURE_PIXEL_SIZE;
	scale *= get_line_width(UV / TEXTURE_PIXEL_SIZE, timeStep);
	for (int i = 0; i < ang_res; i++) {
		float angle = 2.0 * pi * float(i) / float(ang_res);
		vec2 disp = scale * vec2(cos(angle), sin(angle));
		alpha += texture(TEXTURE, UV + disp).a;
	}
	
	if ((alpha > 0.0) && (texture(TEXTURE, UV).a < 0.1)) {
		COLOR = outline_colour;
	}
	else {
		COLOR = texture(TEXTURE, UV);
	}
}"

[sub_resource type="ShaderMaterial" id=51]
resource_local_to_scene = true
shader = SubResource( 50 )
shader_param/max_line_width = 5.0
shader_param/min_line_width = 4.0
shader_param/freq = 5.0
shader_param/block_size = 5.0
shader_param/outline_colour = Plane( 0, 0, 0, 1 )

[sub_resource type="Animation" id=55]
length = 0.001
tracks/0/type = "value"
tracks/0/path = NodePath("DestroyedParticles:emitting")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0 ),
"transitions": PoolRealArray( 1 ),
"update": 0,
"values": [ false ]
}

[sub_resource type="Animation" id=56]
resource_name = "explode"
tracks/0/type = "value"
tracks/0/path = NodePath("DestroyedParticles:emitting")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0 ),
"transitions": PoolRealArray( 1 ),
"update": 1,
"values": [ true ]
}
tracks/1/type = "method"
tracks/1/path = NodePath(".")
tracks/1/interp = 1
tracks/1/loop_wrap = true
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/keys = {
"times": PoolRealArray( 0.4 ),
"transitions": PoolRealArray( 1 ),
"values": [ {
"args": [  ],
"method": "queue_free"
} ]
}
tracks/2/type = "value"
tracks/2/path = NodePath("Sprite:visible")
tracks/2/interp = 1
tracks/2/loop_wrap = true
tracks/2/imported = false
tracks/2/enabled = true
tracks/2/keys = {
"times": PoolRealArray( 0 ),
"transitions": PoolRealArray( 1 ),
"update": 1,
"values": [ false ]
}

[sub_resource type="CircleShape2D" id=57]
radius = 11.0

[node name="GrenadeAmmo" type="RigidBody2D"]
collision_layer = 16
collision_mask = 14
physics_material_override = SubResource( 53 )
gravity_scale = 10.0
angular_velocity = 10.0
script = ExtResource( 1 )

[node name="CollisionShape2D" type="CollisionShape2D" parent="."]
position = Vector2( -1, 0 )
shape = SubResource( 54 )

[node name="DestroyedParticles" type="Particles2D" parent="."]
material = SubResource( 43 )
emitting = false
amount = 35
lifetime = 0.4
one_shot = true
explosiveness = 1.0
process_material = SubResource( 45 )
texture = ExtResource( 2 )

[node name="Sprite" type="Sprite" parent="."]
material = SubResource( 51 )
position = Vector2( -1, -4 )
scale = Vector2( 0.326923, 0.326923 )
texture = ExtResource( 3 )

[node name="Timer" type="Timer" parent="."]
wait_time = 2.0
autostart = true

[node name="AnimationPlayer" type="AnimationPlayer" parent="."]
anims/RESET = SubResource( 55 )
anims/explode = SubResource( 56 )

[node name="OverlapDetector" type="Area2D" parent="."]
collision_layer = 2048

[node name="CollisionShape2D" type="CollisionShape2D" parent="OverlapDetector"]
position = Vector2( -1, 0 )
shape = SubResource( 57 )

[connection signal="timeout" from="Timer" to="." method="_on_Timer_timeout"]
